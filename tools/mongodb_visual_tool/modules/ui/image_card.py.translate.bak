#!/usr/bin/env python3
"""
图像卡片组件 - 用于显示文档中的图像和元数据
"""
import os
import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk

from ..config.settings import CARD_WIDTH, CARD_HEIGHT

class ImageCard(ttk.Frame):
    """显示图像和元数据的卡片组件"""
    
    def __init__(self, parent, doc=None, width=CARD_WIDTH, height=CARD_HEIGHT, on_select_callback=None):
        """初始化图像卡片
        
        Args:
            parent: 父级组件
            doc (dict, optional): 文档数据
            width (int, optional): 卡片宽度
            height (int, optional): 卡片高度
            on_select_callback (callable, optional): 选择状态改变时的回调函数
        """
        super().__init__(parent)
        
        self.width = width
        self.height = height
        self.doc = doc or {}
        self.metadata = {}
        self.image_path = None
        self.image = None
        self.is_selected = False  # 选中状态标志
        self.on_select_callback = on_select_callback
        
        # 默认背景色
        default_bg = "#f0f0f0"
        
        # 为了保持一致的卡片大小，创建一个额外的固定尺寸容器
        self.container = tk.Frame(self, width=width, height=height+80)
        self.container.pack(fill=tk.BOTH, expand=True)
        self.container.pack_propagate(False)  # 防止容器大小变化
        
        # 创建主框架
        self.main_frame = tk.Frame(self.container, 
                                 background=default_bg,
                                 borderwidth=2,
                                 relief="solid",
                                 highlightthickness=3,
                                 highlightbackground="#d9d9d9",
                                 padx=0, pady=0)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=0, pady=0)
        
        # 提取元数据
        self._extract_metadata()
        
        # 创建图像显示区域
        self.image_frame = tk.Frame(self.main_frame, width=width-10, height=height-10, background=default_bg)
        self.image_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.image_frame.pack_propagate(False)  # 防止框架收缩
        
        self.image_label = ttk.Label(self.image_frame, text="加载中...")
        self.image_label.pack(fill=tk.BOTH, expand=True)
        
        # 创建元数据显示区域
        self.meta_frame = tk.Frame(self.main_frame, background=default_bg)
        self.meta_frame.pack(fill=tk.X, padx=5, pady=2)
        
        # 创建选择复选框
        self.select_var = tk.BooleanVar(value=False)
        
        # 创建风格化的选择复选框
        style = ttk.Style()
        style.configure("Bold.TCheckbutton", font=('TkDefaultFont', 10, 'bold'))
        
        self.select_checkbox = ttk.Checkbutton(self.meta_frame, 
                                             variable=self.select_var,
                                             style="Bold.TCheckbutton",
                                             command=self._on_checkbox_toggle)
        self.select_checkbox.pack(side=tk.LEFT)
        
        # 显示文件名或标题
        name = self.metadata.get('filename', "未命名")
        self.name_label = ttk.Label(self.meta_frame, text=name, wraplength=width-40)
        self.name_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # 如果文件不存在，添加警告标记
        if self.doc.get('_file_missing'):
            warning_label = ttk.Label(self.meta_frame, text="⚠️", foreground="red", 
                                    font=("Arial", 12, "bold"))
            warning_label.pack(side=tk.RIGHT)
        
        # 添加大小信息（如果有）
        info_frame = tk.Frame(self.main_frame, background=default_bg)
        info_frame.pack(fill=tk.X, padx=5)
        
        if 'size' in self.metadata:
            size_kb = int(self.metadata['size'] / 1024) if isinstance(self.metadata['size'], (int, float)) else '?'
            size_text = f"大小: {size_kb} KB"
            size_label = ttk.Label(info_frame, text=size_text)
            size_label.pack(side=tk.LEFT, padx=(0, 10))
            
        # 添加艺术流派（如果有）
        if 'artMovement' in self.metadata:
            movement_label = ttk.Label(info_frame, text=f"风格: {self.metadata['artMovement']}")
            movement_label.pack(side=tk.LEFT)
        
        # 绑定左键点击事件
        self.bind("<Button-1>", self._on_click)
        self.image_label.bind("<Button-1>", self._on_click)
        self.name_label.bind("<Button-1>", self._on_click)
        self.main_frame.bind("<Button-1>", self._on_click)
        self.image_frame.bind("<Button-1>", self._on_click)
        self.meta_frame.bind("<Button-1>", self._on_click)
        info_frame.bind("<Button-1>", self._on_click)
    
    def _extract_metadata(self):
        """从文档中提取元数据"""
        if not self.doc:
            return
            
        # 提取图像路径
        if 'filePath' in self.doc:
            self.image_path = self.doc['filePath']
            self.metadata['filepath'] = self.image_path
        elif 'imageUrl' in self.doc:
            self.image_path = self.doc['imageUrl']
            self.metadata['imageurl'] = self.image_path
                
        # 提取其他元数据
        if 'filename' in self.doc:
            self.metadata['filename'] = self.doc['filename']
        elif 'title' in self.doc:
            self.metadata['filename'] = self.doc['title']
                
        if 'size' in self.doc:
            self.metadata['size'] = self.doc['size']
                
        if 'metadata' in self.doc and isinstance(self.doc['metadata'], dict):
            for key, value in self.doc['metadata'].items():
                self.metadata[key] = value
    
    def _on_click(self, event):
        """处理左键点击事件"""
        # 切换选中状态
        new_state = not self.select_var.get()
        self.select_var.set(new_state)
        # 直接调用更新视觉效果
        self._on_checkbox_toggle()
        # 强制更新UI
        self.update_idletasks()
    
    def _on_checkbox_toggle(self):
        """处理复选框状态改变"""
        self.is_selected = self.select_var.get()
        
        if self.is_selected:
            # 选中状态样式
            selected_bg = "#1E90FF"
            selected_border = "#0078D7"
            selected_text = "white"
            
            # 主框架设置
            self.main_frame.configure(
                background=selected_bg,
                highlightbackground=selected_border,
                highlightthickness=5,
                borderwidth=3,
                relief="raised"
            )
            
            # 所有子框架设置为相同的背景色
            for widget in self.main_frame.winfo_children():
                if isinstance(widget, tk.Frame):
                    widget.configure(background=selected_bg)
            
            # 直接设置已知的子框架
            if hasattr(self, 'image_frame'):
                self.image_frame.configure(background=selected_bg)
            if hasattr(self, 'meta_frame'):
                self.meta_frame.configure(background=selected_bg)
                
            # 所有标签文本改为白色
            for frame in self.main_frame.winfo_children():
                if isinstance(frame, tk.Frame):
                    for widget in frame.winfo_children():
                        if isinstance(widget, ttk.Label):
                            widget.configure(foreground=selected_text)
            
            # 确保文件名标签颜色也更改
            if hasattr(self, 'name_label'):
                self.name_label.configure(foreground=selected_text)
                
        else:
            # 未选中状态样式
            default_bg = "#f0f0f0"
            default_border = "#d9d9d9"
            default_text = "black"
            
            # 主框架恢复默认样式
            self.main_frame.configure(
                background=default_bg,
                highlightbackground=default_border,
                highlightthickness=3,
                borderwidth=2,
                relief="solid"
            )
            
            # 恢复所有子框架为默认背景色
            for widget in self.main_frame.winfo_children():
                if isinstance(widget, tk.Frame):
                    widget.configure(background=default_bg)
            
            # 直接设置已知的子框架
            if hasattr(self, 'image_frame'):
                self.image_frame.configure(background=default_bg)
            if hasattr(self, 'meta_frame'):
                self.meta_frame.configure(background=default_bg)
                
            # 恢复所有标签文本为默认颜色
            for frame in self.main_frame.winfo_children():
                if isinstance(frame, tk.Frame):
                    for widget in frame.winfo_children():
                        if isinstance(widget, ttk.Label):
                            widget.configure(foreground=default_text)
            
            # 确保文件名标签颜色也恢复
            if hasattr(self, 'name_label'):
                self.name_label.configure(foreground=default_text)
        
        # 调用选择回调（如果有）
        if self.on_select_callback:
            self.on_select_callback(self, self.is_selected)
    
    def set_selected(self, selected):
        """设置选中状态
        
        Args:
            selected (bool): 是否选中
        """
        if self.is_selected != selected:
            self.select_var.set(selected)
            self._on_checkbox_toggle()
    
    def load_image(self):
        """加载图像
        
        Returns:
            bool: 是否成功加载图像
        """
        if not self.image_path or not os.path.exists(self.image_path):
            # 无法加载图像，显示占位符
            self.image_label.configure(text="图像不存在")
            return False
            
        try:
            # 打开图像
            img = Image.open(self.image_path)
            
            # 计算调整大小后的尺寸（保持宽高比）
            img_width, img_height = img.size
            target_width = self.width - 20
            target_height = self.height - 20
            
            ratio = min(target_width / img_width, target_height / img_height)
            new_width = int(img_width * ratio)
            new_height = int(img_height * ratio)
            
            # 调整大小
            img = img.resize((new_width, new_height), Image.LANCZOS)
            
            # 转换为Tkinter图像
            self.image = ImageTk.PhotoImage(img)
            
            # 更新标签
            self.image_label.configure(image=self.image, text="")
            
            return True
        except Exception as e:
            self.image_label.configure(text=f"加载失败: {str(e)}")
            return False
    
    def setup_context_menu(self, callback):
        """设置上下文菜单
        
        Args:
            callback (callable): 菜单项点击回调函数
        """
        self.context_menu = tk.Menu(self, tearoff=0)
        self.context_menu.add_command(label="查看详情", command=lambda: callback("view", self.doc))
        self.context_menu.add_command(label="创建关系", command=lambda: callback("relate", self.doc))
        self.context_menu.add_command(label="导出为JSON", command=lambda: callback("export", self.doc))
        self.context_menu.add_separator()
        self.context_menu.add_command(label="删除", command=lambda: callback("delete", self.doc), 
                                     foreground="red")
        
        # 绑定右键菜单
        self.bind("<Button-3>", self._show_context_menu)
        self.image_label.bind("<Button-3>", self._show_context_menu)
        self.name_label.bind("<Button-3>", self._show_context_menu)
    
    def _show_context_menu(self, event):
        """显示上下文菜单
        
        Args:
            event: 事件对象
        """
        if hasattr(self, 'context_menu'):
            self.context_menu.tk_popup(event.x_root, event.y_root) 